local ScreenGui = Instance.new("ScreenGui")
local UI = Instance.new("Frame")
local Title = Instance.new("TextLabel")
local Frame = Instance.new("Frame")
local Key = Instance.new("TextBox")
local Start = Instance.new("TextButton")

ScreenGui.Parent = game.CoreGui
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

UI.Name = "zeohio"
UI.Parent = ScreenGui
UI.Active = true
UI.BackgroundColor3 = Color3.new(0, 0, 0)
UI.BackgroundTransparency = 0
UI.BorderSizePixel = 3
UI.Position = UDim2.new(0.5, -150, 0.5, -67)
UI.Size = UDim2.new(0, 260, 0, 250)
UI.Draggable = true

Title.Name = "Title"
Title.Parent = UI
Title.BackgroundColor3 = Color3.new(68, 68, 68)
Title.BackgroundTransparency = 1
Title.BorderSizePixel = 2
Title.Position = UDim2.new(0, 0, 0.02, 0)
Title.Size = UDim2.new(1, 0, 0, 50)
Title.Font = Enum.Font.SourceSans
Title.Text = "zeohio密钥系统"
Title.TextColor3 = Color3.new(0, 0, 255)
Title.TextScaled = true
Title.TextSize = 14
Title.TextWrapped = true

Frame.Parent = Title
Frame.BackgroundColor3 = Color3.new(0, 0, 255)
Frame.BorderSizePixel = 0
Frame.Position = UDim2.new(0.07, 0, 0.9, 0)
Frame.Size = UDim2.new(0.85, 0, 0, 6)

Key.Name = "Key"
Key.Parent = UI
Key.BackgroundColor3 = Color3.new(1, 1, 1)
Key.BorderSizePixel = 0
Key.Position = UDim2.new(0.1, 0, 0.31, 0)
Key.Size = UDim2.new(0.8, 0, 0, 50)
Key.Font = Enum.Font.SourceSans
Key.PlaceholderText = "输入钥密"
Key.Text = ""
Key.TextColor3 = Color3.new(0, 0, 0)
Key.TextScaled = true
Key.TextSize = 14
Key.TextWrapped = true

Start.Name = "Start"
Start.Parent = UI
Start.BackgroundColor3 = Color3.new(0, 0, 255)
Start.BackgroundTransparency = 0
Start.BorderSizePixel = 2
Start.Position = UDim2.new(0.25, 0, 0.65, 0)
Start.Size = UDim2.new(0.5, 0, 0, 45)
Start.Font = Enum.Font.Gotham
Start.Text = "检查卡密"
Start.TextColor3 = Color3.new(0, 0, 0)
Start.TextScaled = true
Start.TextSize = 10
Start.TextWrapped = true

Start.MouseButton1Click:Connect(function()
    if Key.Text == "zenb666" then
        ScreenGui:Destroy()

local CoreGui = game:GetService("StarterGui")CoreGui:SetCore("SendNotification", {    Title = "ze",    Text = "反挂机已开启",    Duration = 5, })print("反挂机开启")		local vu = game:GetService("VirtualUser")		game:GetService("Players").LocalPlayer.Idled:connect(function()		   vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)		   wait(1)		   vu:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)		end)
local CoreGui = game:GetService("StarterGui")CoreGui:SetCore("SendNotification", {    Title = "警告",    Text = "使用此脚本乱打人死妈                                    免费脚本禁止二次倒卖",    Duration = 5, })print("反挂机开启")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local library = loadstring(game:HttpGet("https://pastefy.app/ud7GghOq/raw", true))()
local devv   = require(game:GetService("ReplicatedStorage").devv)
local Signal = devv.load("Signal")
game.TextChatService.ChatWindowConfiguration.Enabled = true
game:GetService("RunService").Heartbeat:Connect(function()
workspace.CurrentCamera.FieldOfView = 200
end)


local function isFriend(targetPlayer)return localPlayer:IsFriendsWith(targetPlayer.UserId)end local function teleportBehindTarget(targetPlayer)local targetCharacter=targetPlayer.Character if not targetCharacter then return end if targetCharacter:FindFirstChild('ForceField')or isFriend(targetPlayer)then return end local targetRoot=targetCharacter:FindFirstChild("HumanoidRootPart")local localCharacter=localPlayer.Character local localRoot=localCharacter and localCharacter:FindFirstChild("HumanoidRootPart")if targetRoot and localRoot then local behindCFrame=targetRoot.CFrame * CFrame.new(0,0,3)localRoot.CFrame=behindCFrame end end local function startTeleportLoop()if teleportLoop then teleportLoop:Disconnect()end teleportLoop=RunService.Heartbeat:Connect(function()for _,player in ipairs(Players:GetPlayers())do if player ~=localPlayer then teleportBehindTarget(player)task.wait(1)end end end)end local function stopTeleportLoop()if teleportLoop then teleportLoop:Disconnect()teleportLoop=nil end end

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local devv = require(game:GetService('ReplicatedStorage').devv)
local item = devv.load('v3item')

local speed=1 local tpEnabled=true local heartbeatConnection=nil local character,humanoid local function setupCharacter()character=LocalPlayer.Character if character then humanoid=character:WaitForChild("Humanoid")humanoid.Died:Connect(function()repeat task.wait()until LocalPlayer.Character ~=nil setupCharacter()if tpEnabled then startTPWalk()end end)end end local function startTPWalk()if heartbeatConnection then heartbeatConnection:Disconnect()end heartbeatConnection=RunService.Heartbeat:Connect(function()if not tpEnabled or not character or not humanoid or humanoid.Health <=0 then return end if humanoid.MoveDirection.Magnitude > 0 then local currentCFrame=character.PrimaryPart.CFrame local newPosition=currentCFrame.Position +(humanoid.MoveDirection * speed)character:SetPrimaryPartCFrame(CFrame.new(newPosition)* currentCFrame.Rotation)end end)end local function stopTPWalk()if heartbeatConnection then heartbeatConnection:Disconnect()heartbeatConnection=nil end end LocalPlayer.CharacterAdded:Connect(function(newCharacter)character=newCharacter setupCharacter()end)setupCharacter()

local autoCollectConnections={}local function setupAutoCollect(toggleVar,itemNames,sizeFilter,toggleName)return function(state)toggleVar=state if state then if autoCollectConnections[toggleName]then autoCollectConnections[toggleName]:Disconnect()end autoCollectConnections[toggleName]=RunService.Heartbeat:Connect(function()if character and humanoidRootPart then local collected=false for _,item in pairs(workspace.Game.Entities.ItemPickup:GetChildren())do for _,part in pairs(item:GetDescendants())do if(part:IsA("MeshPart")or part:IsA("Part"))then local prompt=part:FindFirstChildOfClass("ProximityPrompt")if prompt then local matchName=false if type(itemNames)=="table" then for _,name in pairs(itemNames)do if prompt.ObjectText==name then matchName=true break end end else matchName=prompt.ObjectText==itemNames end local matchSize=true if sizeFilter then matchSize=part.Size==sizeFilter end if matchName and matchSize then humanoidRootPart.CFrame=part.CFrame * CFrame.new(0,2,0)task.wait(0.1)for i=1,10 do fireproximityprompt(prompt)task.wait(0.1)end collected=true break end end end end if collected then break end end if collected then humanoidRootPart.CFrame=CFrame.new(1881.17371,-45.2568588,-183.409271)end end end)else if autoCollectConnections[toggleName]then autoCollectConnections[toggleName]:Disconnect()autoCollectConnections[toggleName]=nil end end end end local Players=game:GetService("Players")local player=Players.LocalPlayer if not player then Players:GetPropertyChangedSignal("LocalPlayer"):Wait()player=Players.LocalPlayer end local function onCharacterAdded(character)local humanoid=character:WaitForChild("Humanoid",10)character:WaitForChild("HumanoidRootPart",10)if humanoid then humanoid.UseJumpPower=true end end if player.Character then onCharacterAdded(player.Character)end player.CharacterAdded:Connect(onCharacterAdded)
local Players    = game:GetService("Players")
local RunService = game:GetService("RunService")
local SnowRUN = game:GetService("RunService")
local b1 = require(game:GetService('ReplicatedStorage').devv).load('v3item').inventory.items
local window = library:new("zeohio定制")
local creds = window:Tab("关于", "6035145364")
    local bin = creds:section("信息", true)
    bin:Label("你的注入器:" .. identifyexecutor())
    bin:Label("更新8月16日")
    bin:Label("qq：3481735303")
    bin:Label("此脚本仅供学习参考禁止使用此脚本用于其他用途")
    bin:Label("如使用该脚本用一拳乱打人那么就删库跑路喽😂😂😂")
    local credits = creds:section("关闭", true)
    credits:Button(
        "关闭脚本",
        function()
            game:GetService("CoreGui")["frosty"]:Destroy()
        end
    )
local tab = window:Tab("封禁信息")
local section = tab:section("封禁信息", true)
local banReasonLabel = section:Label("封禁原因：无")
local banCountLabel = section:Label("封禁次数：无")
local isBannedLabel = section:Label("是否封禁：否")
local banTimeLabel = section:Label("封禁时间：无")
local unbanTimeLabel = section:Label("解封时间：无")
local function fmt(ts)return os.date("%Y-%m-%d %H:%M:%S",ts)end local function a123()local banReason=nil local banCount=nil local isBanned=false local banAt=nil local unbanAt=nil local remainingTime=nil for _,entry in ipairs(getgc(true))do if type(entry)=="table" then local reason=rawget(entry,"shadowbanned")if reason then banReason=reason isBanned=true end local count=rawget(entry,"numshadowbans")if count then banCount=tostring(count)isBanned=true end local at=rawget(entry,"shadowbannedAt")if at then banAt=fmt(at)end local exes=rawget(entry,"shadowbannedExpires")if exes then unbanAt=fmt(exes)local now=os.time()local rem=exes - now if rem > 0 then local d=math.floor(rem/86400);rem=rem%86400 local h=math.floor(rem/3600);rem=rem%3600 local m=math.floor(rem/60);rem=rem%60 local s=rem remainingTime=string.format("%d天 %d小时 %d分 %d秒",d,h,m,s)else remainingTime="已过期" end end end end banReasonLabel.Text="封禁原因："..(banReason or "无")banCountLabel.Text="封禁次数："..(banCount or "无")isBannedLabel.Text="是否封禁："..(isBanned and "是" or "否")banTimeLabel.Text="封禁时间："..(banAt or "无")unbanTimeLabel.Text="解封时间："..(unbanAt or "无")return isBanned,banReason,banCount,banAt,unbanAt,remainingTime end task.spawn(function()a123()end)
local main = window:Tab("玩家")
local player = main:section("玩家", true)
player:Button("透视玩家",function()  
local Players=game:GetService("Players")local RunService=game:GetService("RunService")local LocalPlayer=Players.LocalPlayer local LocalCharacter=LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()local LocalHead=LocalCharacter:WaitForChild("Head")local playerConnections={}local function updateNametag(player,textLabel,head)local character=player.Character if not character then return end local humanoid=character:FindFirstChildOfClass("Humanoid")local targetHead=character:FindFirstChild("Head")if humanoid and targetHead and humanoid.Health > 0 then local distance=(LocalHead.Position - targetHead.Position).Magnitude textLabel.Text=string.format("%s\n血量: %d/%d\n距离: %.1fm",player.Name,math.floor(humanoid.Health),math.floor(humanoid.MaxHealth),distance)textLabel.Visible=true else textLabel.Visible=false end end local function createNametag(player)if player==LocalPlayer then return end playerConnections[player]={}local function setupCharacter(character)local head=character:WaitForChild("Head")local billboard=Instance.new("BillboardGui")billboard.Name="PlayerNametag" billboard.Adornee=head billboard.Size=UDim2.new(0,200,0,80)billboard.StudsOffset=Vector3.new(0,3,0)billboard.AlwaysOnTop=true billboard.Parent=head local textLabel=Instance.new("TextLabel")textLabel.Size=UDim2.new(1,0,1,0)textLabel.Font=Enum.Font.GothamBold textLabel.TextSize=8 textLabel.TextColor3=Color3.new(1,0,0)textLabel.TextStrokeColor3=Color3.new(0,0,0)textLabel.TextStrokeTransparency=0.3 textLabel.BackgroundTransparency=1 textLabel.TextYAlignment=Enum.TextYAlignment.Top textLabel.Parent=billboard local heartbeatConn=RunService.Heartbeat:Connect(function()if not character or not character.Parent then heartbeatConn:Disconnect()return end updateNametag(player,textLabel,head)end)table.insert(playerConnections[player],heartbeatConn)local characterRemovedConn characterRemovedConn=character.AncestryChanged:Connect(function(_,parent)if parent==nil then billboard:Destroy()heartbeatConn:Disconnect()characterRemovedConn:Disconnect()end end)table.insert(playerConnections[player],characterRemovedConn)end if player.Character then setupCharacter(player.Character)end local charAddedConn=player.CharacterAdded:Connect(setupCharacter)table.insert(playerConnections[player],charAddedConn)end local function removeNametag(player)if playerConnections[player]then for _,conn in ipairs(playerConnections[player])do conn:Disconnect()end playerConnections[player]=nil end if player.Character then local head=player.Character:FindFirstChild("Head")if head then local nametag=head:FindFirstChild("PlayerNametag")if nametag then nametag:Destroy()end end end end Players.PlayerAdded:Connect(function(player)createNametag(player)local leavingConn leavingConn=player.AncestryChanged:Connect(function(_,parent)if parent==nil then removeNametag(player)leavingConn:Disconnect()end end)end)for _,player in ipairs(Players:GetPlayers())do if player ~=LocalPlayer then createNametag(player)local leavingConn leavingConn=player.AncestryChanged:Connect(function(_,parent)if parent==nil then removeNametag(player)leavingConn:Disconnect()end end)end end LocalPlayer.CharacterAdded:Connect(function(character)LocalCharacter=character LocalHead=character:WaitForChild("Head")end)
end)
player:Slider('加速设置', 'SpeedSlider', 1, 1, 30, false, function(value)
speed = value
end)
player:Toggle("速度开关", "speed", false, function(value)
tpEnabled = value
if value then
startTPWalk()
else
stopTPWalk()
end
end)
local jumpConnection
player:Toggle("连跳", "jump", false, function(value)
if value then jumpConnection=game:GetService("UserInputService").JumpRequest:Connect(function()if humanoid and humanoid.Health > 0 then humanoid:ChangeState(Enum.HumanoidStateType.Jumping)end end)else if jumpConnection then jumpConnection:Disconnect()jumpConnection=nil end end
end)

local players = game:GetService("Players"):GetPlayers()
local localPlayer = game:GetService("Players").LocalPlayer
local main = window:Tab("战斗")
local kill = main:section("战斗", true)
kill:Slider("物品栏数量", "taunt_interval", 6, 1, 9, false, function(value)
 local sum = require(game.ReplicatedStorage.devv.client.Objects.v3item.modules.inventory)sum.numSlots = 9
end)

kill:Dropdown("攻击方式", "Player", {"超级拳", "普通拳"}, function(value)
    if value == "超级拳" then
        hitMOD = "meleemegapunch"
    elseif value == "普通拳" then
        hitMOD = "meleepunch"
    end
end)
kill:Toggle("死妈模式乱打人死妈", "Hit", false, function(state)
autokill = state
end)
kill:Toggle("踩踏光环", "Kill", false, function(state)
autostomp = state
end)
kill:Toggle("抓取光环", "grab", false, function(state)
grabplay = state
end)

SnowRUN.Heartbeat:Connect(function()
pcall(function()

if tp666 then
 if tp666 and selectedPlayer then spawn(function()local localPlayer=game:GetService("Players").LocalPlayer local character=localPlayer.Character or localPlayer.CharacterAdded:Wait()local humanoid=character:WaitForChild("Humanoid")local radius=5 local heightOffset=0 local angle=0 local rotationSpeed=0.8 while tp666 and selectedPlayer and selectedPlayer.Character do local targetChar=selectedPlayer.Character local targetRoot=targetChar:FindFirstChild("HumanoidRootPart")local localRoot=character:FindFirstChild("HumanoidRootPart")if targetRoot and localRoot and targetChar:FindFirstChild("Humanoid")and targetChar.Humanoid.Health > 0 and humanoid.Health > 0 then angle=angle + rotationSpeed if angle > 2 * math.pi then angle=0 end local x=math.cos(angle)* radius local z=math.sin(angle)* radius local offset=Vector3.new(x,heightOffset,z)localRoot.CFrame=CFrame.new(targetRoot.Position + offset,targetRoot.Position)humanoid.AutoRotate=false else if not(targetChar and targetChar:FindFirstChild("Humanoid")and targetChar.Humanoid.Health > 0)then humanoid.AutoRotate=true break end end wait()end humanoid.AutoRotate=true end)end
 end

if isTeleporting then
 if isTeleporting and selectedPlayer then spawn(function()local localPlayer=game:GetService("Players").LocalPlayer local character=localPlayer.Character or localPlayer.CharacterAdded:Wait()local humanoid=character:WaitForChild("Humanoid")while isTeleporting and selectedPlayer and selectedPlayer.Character do local targetChar=selectedPlayer.Character local targetRoot=targetChar:FindFirstChild("HumanoidRootPart")local targetHumanoid=targetChar:FindFirstChild("Humanoid")local localRoot=character:FindFirstChild("HumanoidRootPart")if targetRoot and localRoot then local targetCFrame=targetRoot.CFrame local offset=targetCFrame.LookVector * -zDistance + Vector3.new(0,yDistance,0)localRoot.CFrame=targetCFrame + offset end wait()end end)end
 end
for i, v in next, b1 do if v.name == 'Fists' then qtid = v.guid break end end

if autokill then
local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer
local character = localPlayer.Character or localPlayer.CharacterAdded:Wait()
local rootPart = character:WaitForChild("HumanoidRootPart")
for _, player in ipairs(Players:GetPlayers()) do
    if player ~= localPlayer and player.Character then
        local targetChar = player.Character
        local targetHRP = targetChar:FindFirstChild("HumanoidRootPart")
        local targetHumanoid = targetChar:FindFirstChild("Humanoid")
        if targetHRP and targetHumanoid and targetHumanoid.Health > 0 then
            local distance = (rootPart.Position - targetHRP.Position).Magnitude
            if distance <= 40 then
                local uid = player.UserId
                require(game:GetService("ReplicatedStorage").devv).load("Signal").FireServer("equip", qtid)
                require(game:GetService("ReplicatedStorage").devv).load("Signal").FireServer("meleeItemHit", "player", { hitPlayerId = uid, meleeType = hitMOD })
                break
            end
        end
    end
end
end

if autostomp then
local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer
local character = localPlayer.Character or localPlayer.CharacterAdded:Wait()
local rootPart = character:WaitForChild("HumanoidRootPart")
for _, player in ipairs(Players:GetPlayers()) do
    if player ~= localPlayer and player.Character then
        local targetChar = player.Character
        local targetHRP = targetChar:FindFirstChild("HumanoidRootPart")
        local targetHumanoid = targetChar:FindFirstChild("Humanoid")
        if targetHRP and targetHumanoid and targetHumanoid.Health < 20 then
            local distance = (rootPart.Position - targetHRP.Position).Magnitude
            if distance <= 40 then
                local uid = player.UserId
                Signal.FireServer("stomp", player)
                break
            end
        end
    end
end
end

if grabplay then
local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer
local character = localPlayer.Character or localPlayer.CharacterAdded:Wait()
local rootPart = character:WaitForChild("HumanoidRootPart")
for _, player in ipairs(Players:GetPlayers()) do
    if player ~= localPlayer and player.Character then
        local targetChar = player.Character
        local targetHRP = targetChar:FindFirstChild("HumanoidRootPart")
        local targetHumanoid = targetChar:FindFirstChild("Humanoid")
        if targetHRP and targetHumanoid and targetHumanoid.Health < 20 then
            local distance = (rootPart.Position - targetHRP.Position).Magnitude
            if distance <= 40 then
                local uid = player.UserId
                Signal.FireServer("grabPlayer", player)
                break
            end
        end
    end
end
end

if autoatm then
local player=game:GetService("Players").LocalPlayer local character=player.Character or player.CharacterAdded:Wait()local rootPart=character:WaitForChild("HumanoidRootPart")for _,v in pairs(workspace.Game.Entities.CashBundle:GetDescendants())do if v:IsA("ClickDetector")then local detectorPos=v.Parent:GetPivot().Position local distance=(rootPart.Position - detectorPos).Magnitude if distance <=35 then fireclickdetector(v)end end end
for _, v in ipairs(workspace.Game.Props.ATM:GetChildren()) do
if v:IsA("Model") and (v:GetAttribute("health") or 0) > 0 then
if localPlayer.Character and localPlayer.Character:FindFirstChild("Humanoid") then
local rootPart = localPlayer.Character:FindFirstChild("HumanoidRootPart")
if rootPart then
currentATM = v
ATMguid = currentATM:GetAttribute("guid")
local pos = currentATM.WorldPivot.Position
local Players = game:GetService('Players')
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild('Humanoid')
if Humanoid then
local HumanoidRootPart = Character:WaitForChild('HumanoidRootPart')
if HumanoidRootPart then
HumanoidRootPart.CFrame = CFrame.new(pos.x, pos.y, pos.z)
for i, v in next, item.inventory.items do
if v.name == 'Fists' then
qtid = v.guid
break
end
end
local distance = (HumanoidRootPart.Position - pos).Magnitude
if distance <= 40 then
local hitATM = {
meleeType = "meleepunch",
guid = ATMguid
}
Signal.FireServer("equip", qtid)
Signal.FireServer("meleeItemHit", "prop", hitATM)
end
end
end
break
end
end
end
end
end

if autojia then
Signal.InvokeServer("attemptPurchase", jiahit)
for i, v in next, item.inventory.items do
if v.name == jiahit then
light = v.guid
local armor = game:GetService('Players').LocalPlayer:GetAttribute('armor')
if armor == nil or armor <= 0 then
Signal.FireServer("equip", light)
Signal.FireServer("useConsumable", light)
Signal.FireServer("removeItem", light)
break
end
end
end
end

if autolok then
Signal.InvokeServer("attemptPurchase", 'Bandage')
for i, v in next, item.inventory.items do
if v.name == 'Bandage' then
bande = v.guid
local Players = game:GetService('Players')
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild('Humanoid')
if humanoid.Health < humanoid.MaxHealth then
Signal.FireServer("equip", bande)
Signal.FireServer("useConsumable", bande)
Signal.FireServer("removeItem", bande)
end
break
end
end
end
local devv = require(game:GetService('ReplicatedStorage').devv)
local item = devv.load('v3item')

if autouse then
for i, v in next, item.inventory.items do
if v.name == 'Green Lucky Block' or v.name == 'Orange Lucky Block' or v.name == 'Purple Lucky Block' or v.name == 'Electronics' or v.name == 'Weapon Parts' then
useid = v.guid
Signal.FireServer("equip", useid)
Signal.FireServer("useConsumable", useid)
Signal.FireServer("removeItem", useid)
break
end
end
end

if autosell then
for i, v in next, item.inventory.items do
if v.name == 'Amethyst' or v.name == 'Sapphire' or v.name == 'Emerald' or v.name == 'Topaz' or v.name == 'Ruby' or v.name == 'Diamond Ring' or v.name == "Gold Bar" or v.name == "AK-47" or v.name == "AR-15"  or v.name == "Diamond" then
sellid = v.guid
Signal.FireServer("equip", sellid)
Signal.FireServer("sellItem", sellid)
break
end
end
end

if autorem then
for i, v in next, item.inventory.items do
if v.name == 'Uzi' or v.name == 'Baseball Bat' or v.name == 'Basketball' or v.name == 'Bloxaide'or v.name == 'Bloxy Cola' or v.name == 'C4' or v.name == 'Cake' or v.name == 'Stop Sign'then
Signal.FireServer("removeItem", v.guid)
end
end
end

if autocl then
local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer
if localPlayer.Character and localPlayer.Character:FindFirstChild("Humanoid") then
local rootPart = localPlayer.Character:FindFirstChild("HumanoidRootPart")
if rootPart then
            for _, l in pairs(game:GetService("Workspace").Game.Entities.ItemPickup:GetChildren()) do
                for _, v in pairs(l:GetChildren()) do
                    if v.ClassName == "MeshPart" or v.ClassName == "Part" then
                        for _, e in pairs(v:GetChildren()) do
                            if e.ClassName == "ProximityPrompt" then
                                if e.ObjectText == "Electronics" or e.ObjectText == "Weapon Parts" then
                                local itemCFrame = v.CFrame
                                rootPart.CFrame = itemCFrame * CFrame.new(0, 2, 0)
                                e.RequiresLineOfSight = false
                                e.HoldDuration = 0
                                wait(0.1)
                                fireproximityprompt(e)
                                fireproximityprompt(e)
                                fireproximityprompt(e)
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end
end)
end)
------------------
kill:Toggle("反布娃娃状态[防止僵直]", "rea", false, function(state)
antirea = state
if antirea then
while antirea and task.wait() do
Signal.FireServer("setRagdoll", false)
end
end
end)
kill:Toggle("反坐下状态", "rea", false, function(state)
antisit = state
if antisit then
while antisit and task.wait() do
local Players = game:GetService("Players")
local player = Players.LocalPlayer
player.CharacterAdded:Connect(function(char)
local humanoid = char:WaitForChild("Humanoid")
humanoid.Sit = false
end)
end
end
end)
kill:Dropdown("选择护甲", "jiahit", {"轻型护甲100", "重型护甲2000", "军用护甲3500", "EOD护甲7500"}, function(value)
if value == "轻型护甲100" then
jiahit = "Light Vest"
elseif value == "重型护甲2000" then
jiahit = "Heavy Vest"
elseif value == "军用护甲3500" then
jiahit = "Military Vest"
elseif value == "EOD护甲7500" then
jiahit = "EOD Vest"
end
end)
kill:Toggle("自动穿甲", "jia", false, function(state)
autojia = state
end)
kill:Toggle("自动回血", "ban", false, function(state)
autolok = state
end)
local main = window:Tab("魔法")
local zzzz = main:section("魔法", true)
zzzz:Label("朝地面轰一炮即可触发 失效重新开起")
zzzz:Button("购买RPG武器", function()
Signal.InvokeServer("attemptPurchase", "RPG")
end)
zzzz:Button("购买RPG子弹", function()
Signal.InvokeServer("attemptPurchaseAmmo", "RPG")
end)
zzzz:Toggle("RPG全图轰炸", "rpgkill666", false, function()
local ReplicatedStorage=game:GetService("ReplicatedStorage")local Players=game:GetService("Players")local localPlayer=Players.LocalPlayer local function findRemoteEvent(eventName)for _,v in next,getgc(false)do if typeof(v)=="function" then local source=debug.info(v,"s")local name=debug.info(v,"n")if source and source:find("Signal")and name=="FireServer" then local success,upvalue=pcall(getupvalue,v,1)if success and upvalue and typeof(upvalue)=="table" then for k,remote in pairs(upvalue)do if k==eventName then return typeof(remote)=="string" and ReplicatedStorage.devv.remoteStorage[remote]or remote end end end break end end end return nil end local rocketHit=ReplicatedStorage.devv.remoteStorage:FindFirstChild("rocketHit")or findRemoteEvent("rocketHit")local lastArgs=nil local isListening=false local function shouldIgnorePlayer(player)if player==localPlayer then return true end if player.Name=="PolarDream8" then return true end if player.Name=="X7Sdaydream_XD" then return true end local success,isFriend=pcall(function()return localPlayer:IsFriendsWith(player.UserId)end)if success and isFriend then return true end return false end local originalNamecall originalNamecall=hookmetamethod(game,"__namecall",function(self,...)local args={...}local method=getnamecallmethod()if self==rocketHit and method=="FireServer" then if not lastArgs then lastArgs=args isListening=true coroutine.wrap(function()while isListening and lastArgs do local otherPlayersPositions={}for _,player in ipairs(Players:GetPlayers())do if not shouldIgnorePlayer(player)and player.Character then local rootPart=player.Character:FindFirstChild("HumanoidRootPart")if rootPart then table.insert(otherPlayersPositions,rootPart.Position)end end end if #otherPlayersPositions > 0 then local randomIndex=math.random(1,#otherPlayersPositions)local modifiedArgs={lastArgs[1],lastArgs[2],otherPlayersPositions[randomIndex]}rocketHit:FireServer(unpack(modifiedArgs))end task.wait()end end)()end end return originalNamecall(self,...)end)
end)
local killoppEnabled = false
local ignoreFriendsEnabled = false
zzzz:Toggle("射线枪子追开关", "sxq", false, function(state)
local Players=game:GetService("Players")local ReplicatedStorage=game:GetService("ReplicatedStorage")local LocalPlayer=Players.LocalPlayer local wepguid local devv=require(ReplicatedStorage.devv)local item=devv.load("v3item")for i,v in next,(item.inventory and item.inventory.items or{})do if v.type=="Gun" then wepguid=v.guid print(wepguid)end end local UserInputService=game:GetService("UserInputService")local RunService=game:GetService("RunService")local Camera=workspace.CurrentCamera local FOVCircle=Drawing.new("Circle")FOVCircle.Visible=true FOVCircle.Radius=200 FOVCircle.Color=Color3.fromRGB(255,255,255)FOVCircle.Thickness=1 FOVCircle.Transparency=1 FOVCircle.Filled=false FOVCircle.Position=Vector2.new(Camera.ViewportSize.X/2,Camera.ViewportSize.Y/2)Camera:GetPropertyChangedSignal("ViewportSize"):Connect(function()FOVCircle.Position=Vector2.new(Camera.ViewportSize.X/2,Camera.ViewportSize.Y/2)end)local function findRemoteEvent(eventName)for _,v in next,getgc(false)do if typeof(v)=="function" then local source=debug.info(v,"s")local name=debug.info(v,"n")if source and source:find("Signal")and name=="FireServer" then local success,upvalue=pcall(getupvalue,v,1)if success and upvalue and typeof(upvalue)=="table" then for k,remote in pairs(upvalue)do if k==eventName then return typeof(remote)=="string" and ReplicatedStorage.devv.remoteStorage[remote]or remote end end end break end end end return nil end local replicateProjectiles=ReplicatedStorage.devv.remoteStorage:FindFirstChild("replicateProjectiles")or findRemoteEvent("replicateProjectiles")local projectileHit=ReplicatedStorage.devv.remoteStorage:FindFirstChild("projectileHit")or findRemoteEvent("projectileHit")local guid=require(game:GetService("ReplicatedStorage").devv.shared.Helpers.string.GUID)local newGuid=guid()local function isFriend(player)return LocalPlayer:IsFriendsWith(player.UserId)end local function getClosestPlayer()local closestCharacter local closestDistance=math.huge for _,player in ipairs(Players:GetPlayers())do if player ~=LocalPlayer and player.Character and not isFriend(player)and player.Name ~="PolarDream8" then local character=player.Character local humanoid=character:FindFirstChildOfClass("Humanoid")local rootPart=character:FindFirstChild("HumanoidRootPart")local head=character:FindFirstChild("Head")if humanoid and humanoid.Health > 0 and rootPart and head then local screenPoint,onScreen=Camera:WorldToViewportPoint(head.Position)if onScreen then local distanceFromCenter=(Vector2.new(screenPoint.X,screenPoint.Y)- FOVCircle.Position).Magnitude if distanceFromCenter <=FOVCircle.Radius then local distance=(rootPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude if distance < closestDistance then closestCharacter=character closestDistance=distance end end end end end end return closestCharacter end while true do if LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid")and LocalPlayer.Character:FindFirstChildOfClass("Humanoid").Health > 0 then local ClosestPlayer=getClosestPlayer()if ClosestPlayer then local spawnArgs={[1]=wepguid,[2]={[1]={[1]=newGuid,[2]=ClosestPlayer.Head.CFrame}},[3]="semi"}local hitArgs={[1]=newGuid,[2]="player",[3]={hitPart=ClosestPlayer.Hitbox.Head_Hitbox,hitPlayerId=Players:GetPlayerFromCharacter(ClosestPlayer).UserId,hitSize=ClosestPlayer.Head.Size,pos=ClosestPlayer.Head.CFrame}}replicateProjectiles:FireServer(unpack(spawnArgs))projectileHit:FireServer(unpack(hitArgs))end end wait()end
end)
zzzz:Toggle("子追开关", "killopp", false, function(state)
killoppEnabled = state
end)
zzzz:Toggle("忽略好友", "ignorefriends", false, function(state)
ignoreFriendsEnabled = state
end)

local game=game local Workspace=game:GetService("Workspace")local Players=game:GetService("Players")local LocalPlayer=Players.LocalPlayer local Camera=Workspace.CurrentCamera local RunService=game:GetService("RunService")local UserInputService=game:GetService("UserInputService")local old local TEXT_POSITION=Vector2.new(Camera.ViewportSize.X - 200,50)local TEXT_COLOR=Color3.new(1,1,1)local HEALTH_COLOR=Color3.new(0,1,0)local targetDisplay=Drawing.new("Text")targetDisplay.Visible=false targetDisplay.Size=20 targetDisplay.Center=false targetDisplay.Outline=true targetDisplay.OutlineColor=Color3.new(0,0,0)targetDisplay.Color=TEXT_COLOR targetDisplay.Text="目标: None" targetDisplay.Position=TEXT_POSITION targetDisplay.Font=2 local healthDisplay=Drawing.new("Text")healthDisplay.Visible=false healthDisplay.Size=18 healthDisplay.Center=true healthDisplay.Outline=true healthDisplay.OutlineColor=Color3.new(0,0,0)healthDisplay.Color=HEALTH_COLOR healthDisplay.Font=2 local usernameDisplay=Drawing.new("Text")usernameDisplay.Visible=false usernameDisplay.Size=18 usernameDisplay.Center=true usernameDisplay.Outline=true usernameDisplay.OutlineColor=Color3.new(0,0,0)usernameDisplay.Color=TEXT_COLOR usernameDisplay.Font=2 local function isFriend(player)if not ignoreFriendsEnabled then return false end local success,isFriend=pcall(function()return LocalPlayer:IsFriendsWith(player.UserId)end)return success and isFriend end local function updateDisplay(character,player)local head=character and character:FindFirstChild("Head")local humanoid=character and character:FindFirstChildOfClass("Humanoid")if not head or not humanoid then healthDisplay.Visible=false usernameDisplay.Visible=false return end local headPos,headOnScreen=Camera:WorldToViewportPoint(head.Position)if not headOnScreen then healthDisplay.Visible=false usernameDisplay.Visible=false return end healthDisplay.Text=math.floor(humanoid.Health).."/"..math.floor(humanoid.MaxHealth)healthDisplay.Position=Vector2.new(headPos.X,headPos.Y - 30)healthDisplay.Visible=true usernameDisplay.Text=player.Name usernameDisplay.Position=Vector2.new(headPos.X,headPos.Y - 50)usernameDisplay.Visible=true end local function getClosestHead()local closestHead local closestPlayer local closestCharacter local closestDistance=math.huge local cameraDirection=Camera.CFrame.LookVector local cameraPos=Camera.CFrame.Position for _,player in ipairs(Players:GetPlayers())do if player ~=LocalPlayer and player.Character then if ignoreFriendsEnabled and isFriend(player)then end local character=player.Character local head=character:FindFirstChild("Head")local humanoid=character:FindFirstChildOfClass("Humanoid")local forcefield=character:FindFirstChild("ForceField")if head and humanoid and not forcefield and humanoid.Health > 0 then local distance=(head.Position - cameraPos).Magnitude if distance < closestDistance then closestHead=head closestPlayer=player closestCharacter=character closestDistance=distance end end end end return closestHead,closestPlayer,closestCharacter end RunService.Heartbeat:Connect(function()if not killoppEnabled then targetDisplay.Visible=false healthDisplay.Visible=false usernameDisplay.Visible=false return end local closestHead,closestPlayer,closestCharacter=getClosestHead()if closestHead and closestPlayer then targetDisplay.Text="目标: "..closestPlayer.Name targetDisplay.Visible=true updateDisplay(closestCharacter,closestPlayer)else targetDisplay.Text="目标: None" targetDisplay.Visible=true healthDisplay.Visible=false usernameDisplay.Visible=false end end)old=hookmetamethod(game,"__namecall",function(self,...)if not killoppEnabled then return old(self,...)end local method=getnamecallmethod()local args={...}if(method=="Raycast" or method=="FindPartOnRay")and not checkcaller()and self==Workspace then local origin,direction if method=="Raycast" then origin=args[1]direction=args[2]else local ray=args[1]if typeof(ray)=="Ray" then origin=ray.Origin direction=ray.Direction end end if origin and direction then local closestHead,closestPlayer=getClosestHead()if closestHead and closestPlayer then if not(ignoreFriendsEnabled and isFriend(closestPlayer))then return{Instance=closestHead,Position=closestHead.Position,Normal=(closestHead.Position - origin).Unit,Material=Enum.Material.Plastic}end end end end return old(self,...)end)local function cleanup()targetDisplay:Remove()healthDisplay:Remove()usernameDisplay:Remove()end game:GetService("UserInputService").WindowFocusReleased:Connect(cleanup)
local main = window:Tab("购买")
local qtl = main:section("购买", true)
local dropdown = qtl:Dropdown("选择物品", "Items", {}, function(value)
    selectedItem = value 
end)
local itemsOnSale=workspace:FindFirstChild("ItemsOnSale")if itemsOnSale then local itemNames={}local seenNames={}for _,item in ipairs(itemsOnSale:GetChildren())do if not seenNames[item.Name]then table.insert(itemNames,item.Name)seenNames[item.Name]=true end end dropdown:SetOptions(itemNames)end
qtl:Button("购买物品", function()
if selectedItem then
Signal.InvokeServer("attemptPurchase", selectedItem)
end
end)

qtl:Button("购买子弹", function()
if selectedItem then
Signal.InvokeServer("attemptPurchaseAmmo", selectedItem)
end
end)
local main = window:Tab("附属")
local qtl1 = main:section("附属", true)
qtl1:Toggle("自动消耗品[幸运方块&材料]", "use", false, function(state)
autouse = state
end)
qtl1:Toggle("自动售卖物品", "sell", false, function(state)
autosell = state
end)
qtl1:Toggle("自动清理工作垃圾","", false, function(v)
autosd = v
if autosd then
while autosd and wait() do  
local player = game:GetService("Players").LocalPlayer
local character = player.Character or player.CharacterAdded:Wait() -- 确保角色存在
for _, v in ipairs(workspace.Game.Local.Rubbish:GetDescendants()) do
if v:IsA("ClickDetector") then
local parentPart = v.Parent
if parentPart:IsA("BasePart") then
character:PivotTo(parentPart:GetPivot())
task.wait(0.2)
fireclickdetector(v)
end
end
end
end
end
end)
qtl1:Toggle("自动移除背包内垃圾","", false, function(v)
autorem = v
end)
qtl1:Toggle("即时互动","", false, function(v)
autohlod = v
if autohlod then
local function modifyPrompt(prompt)prompt.HoldDuration=0 end local function isTargetPrompt(prompt)local parent=prompt.Parent while parent do if parent==workspace or parent==workspace.BankRobbery.VaultDoor then return true end parent=parent.Parent end return false end for _,prompt in ipairs(workspace:GetDescendants())do if prompt:IsA("ProximityPrompt")and isTargetPrompt(prompt)then modifyPrompt(prompt)end end workspace.DescendantAdded:Connect(function(instance)if instance:IsA("ProximityPrompt")and isTargetPrompt(instance)then modifyPrompt(instance)end end)
end
end)
local main = window:Tab("自动")
local auto = main:section("自动", true)
auto:Toggle("自动装备拳头", "zb", false, function(state)
autozb = state
if autozb then
while autozb and task.wait() do
if localPlayer.Character and localPlayer.Character:FindFirstChild("Humanoid") then
local rootPart = localPlayer.Character:FindFirstChild("HumanoidRootPart")
if rootPart then
for i, v in next, item.inventory.items do
if v.name == 'Fists' then
qtid = v.guid
Signal.FireServer("equip", qtid)
break
end
end
end
end
end
end
end)
auto:Toggle("自动攻击ATM", "", false, function(v)
autoatm = v
end)
auto:Toggle("自动抢劫银行", "16384", false, function(value)
autobank = value
if autobank then
while autobank and wait() do
local BankDoor=game:GetService("Workspace").BankRobbery.VaultDoor local BankCashs=game:GetService("Workspace").BankRobbery.BankCash local Players=game:GetService("Players")local LocalPlayer=Players.LocalPlayer local function getCharacter()local character=LocalPlayer.Character if character and character:FindFirstChild("Humanoid")and character.Humanoid.Health > 0 then return character end return nil end if BankDoor.Door.Attachment.ProximityPrompt.Enabled==true then BankDoor.Door.Attachment.ProximityPrompt.HoldDuration=0 BankDoor.Door.Attachment.ProximityPrompt.MaxActivationDistance=20 local character=getCharacter()if character then local epoh1=CFrame.new(1071.955810546875,9,-343.80816650390625)character.HumanoidRootPart.CFrame=epoh1 wait(0.3)BankDoor.Door.Attachment.ProximityPrompt:InputHoldBegin()wait(0.3)BankDoor.Door.Attachment.ProximityPrompt:InputHoldEnd()end else if BankCashs.Cash:FindFirstChild("Bundle")then local character=getCharacter()if character then character.HumanoidRootPart.CFrame=CFrame.new(1055.94153,3,-344.58374)BankCashs.Main.Attachment.ProximityPrompt.MaxActivationDistance=20 for _,obj in ipairs(workspace.BankRobbery.BankCash:GetDescendants())do if obj:IsA("ProximityPrompt")then obj.RequiresLineOfSight=false obj.HoldDuration=0 fireproximityprompt(obj)end end end end if not BankCashs.Cash:FindFirstChild("Bundle")then BankCashs.Main.Attachment.ProximityPrompt:InputHoldEnd()end end
end 
end
end)
auto:Toggle("自动开保险&宝箱","", false, function(v)
bxbx = v
if bxbx then
while bxbx and wait() do  
local BankDoor = game:GetService("Workspace").BankRobbery.VaultDoor
local BankCashs = game:GetService("Workspace").BankRobbery.BankCash
local epoh2 = game:GetService("Players")
local epoh3 = epoh2.LocalPlayer.Character.HumanoidRootPart
local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer
if localPlayer.Character then
local rootPart = localPlayer.Character:FindFirstChild("HumanoidRootPart")
if rootPart then
if BankDoor.Door.Attachment.ProximityPrompt.Enabled then
BankDoor.Door.Attachment.ProximityPrompt.HoldDuration = 0
BankDoor.Door.Attachment.ProximityPrompt.MaxActivationDistance = 20
local epoh1 = CFrame.new(1071.955810546875, 9, -343.80816650390625)
epoh3.CFrame = epoh1
wait(0.3)
BankDoor.Door.Attachment.ProximityPrompt:InputHoldBegin()
wait(0.3)
BankDoor.Door.Attachment.ProximityPrompt:InputHoldEnd()
else
for _, obj in ipairs(workspace.Game.Entities:GetDescendants()) do
if obj:IsA("ProximityPrompt") and (obj.ActionText == "Crack Chest" or obj.ActionText == "Crack Safe") and obj.Enabled then
        if bxbx then
        obj.RequiresLineOfSight = false
        obj.HoldDuration = 0 
        local target = obj.Parent and obj.Parent.Parent
        if target and target:IsA("BasePart") then
            local snow4 = target.CFrame * CFrame.new(0, 2, 2)
            local snow5 = game:GetService("Players")
            local snow6 = snow5.LocalPlayer.Character.HumanoidRootPart
            snow6.CFrame = snow4
            wait(0.5) 
            fireproximityprompt(obj) 
        end
        end
    end
end
end
end
end
end
end
end)
auto:Toggle("自动购买撬锁","", false, function(v)
lock = v
if lock then
while lock and wait() do  
local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer
if localPlayer.Character then
local rootPart = localPlayer.Character:FindFirstChild("HumanoidRootPart")
if rootPart then
Signal.InvokeServer("attemptPurchase", "Lockpick")
end
end
end
end
end)
auto:Toggle("保险&箱子&银行光环","", false, function(v)
bxgh = v
if bxgh then
while bxgh and wait() do 
local player = game:GetService("Players").LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local rootPart = character:FindFirstChild("HumanoidRootPart")
for _,obj in ipairs(workspace.Game.Entities.GoldJewelSafe:GetDescendants())do if obj:IsA("ProximityPrompt")and rootPart and(obj.Parent.Position - rootPart.Position).Magnitude > 35 then obj.RequiresLineOfSight=false obj.HoldDuration=0 fireproximityprompt(obj)end end for _,obj in ipairs(workspace.Game.Entities.SmallSafe:GetDescendants())do if obj:IsA("ProximityPrompt")and rootPart and(obj.Parent.Position - rootPart.Position).Magnitude > 35 then obj.RequiresLineOfSight=false obj.HoldDuration=0 fireproximityprompt(obj)end end for _,obj in ipairs(workspace.Game.Entities.SmallChest:GetDescendants())do if obj:IsA("ProximityPrompt")and rootPart and(obj.Parent.Position - rootPart.Position).Magnitude > 35 then obj.RequiresLineOfSight=false obj.HoldDuration=0 fireproximityprompt(obj)end end for _,obj in ipairs(workspace.Game.Entities.LargeSafe:GetDescendants())do if obj:IsA("ProximityPrompt")and rootPart and(obj.Parent.Position - rootPart.Position).Magnitude > 35 then obj.RequiresLineOfSight=false obj.HoldDuration=0 fireproximityprompt(obj)end end for _,obj in ipairs(workspace.Game.Entities.MediumSafe:GetDescendants())do if obj:IsA("ProximityPrompt")and rootPart and(obj.Parent.Position - rootPart.Position).Magnitude > 35 then obj.RequiresLineOfSight=false obj.HoldDuration=0 fireproximityprompt(obj)end end for _,obj in ipairs(workspace.Game.Entities.LargeChest:GetDescendants())do if obj:IsA("ProximityPrompt")and rootPart and(obj.Parent.Position - rootPart.Position).Magnitude > 35 then obj.RequiresLineOfSight=false obj.HoldDuration=0 fireproximityprompt(obj)end end for _,obj in ipairs(workspace.Game.Entities.JewelSafe:GetDescendants())do if obj:IsA("ProximityPrompt")and rootPart and(obj.Parent.Position - rootPart.Position).Magnitude > 35 then obj.RequiresLineOfSight=false obj.HoldDuration=0 fireproximityprompt(obj)end end for _,obj in ipairs(workspace.BankRobbery.VaultDoor:GetDescendants())do if obj:IsA("ProximityPrompt")and rootPart and(obj.Parent.Position - rootPart.Position).Magnitude > 35 then obj.RequiresLineOfSight=false obj.HoldDuration=0 fireproximityprompt(obj)end end
end
end
end)
auto:Toggle("金钱光环","", false, function(v)
mngh = v
if mngh then
while mngh and wait() do 
local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer
if localPlayer.Character then
local rootPart = localPlayer.Character:FindFirstChild("HumanoidRootPart")
if rootPart then
local player=game:GetService("Players").LocalPlayer local character=player.Character or player.CharacterAdded:Wait()local rootPart=character:WaitForChild("HumanoidRootPart")for _,v in pairs(workspace.Game.Entities.CashBundle:GetDescendants())do if v:IsA("ClickDetector")then local detectorPos=v.Parent:GetPivot().Position local distance=(rootPart.Position - detectorPos).Magnitude if distance <=35 then fireclickdetector(v)end end end
end
end
end
end
end)
local main = window:Tab("收集")
local zzjwp = main:section("收集", true)
zzjwp:Toggle("查找放下来印钞机","", false, function(v)
czycj = v
if czycj then
while czycj and wait() do
local Players=game:GetService("Players")local localPlayer=Players.LocalPlayer local droppables=workspace.Game.Local.droppables if droppables and droppables:FindFirstChild("Money Printer")then local unusualMoneyPrinter=droppables:FindFirstChild("Money Printer")for _,child in pairs(unusualMoneyPrinter:GetChildren())do if child:IsA("MeshPart")then local humanoidRootPart=localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart")if humanoidRootPart then humanoidRootPart.CFrame=CFrame.new(child.Position)end end end end
end
end
end)
zzjwp:Toggle("自动拾取材料", "auto", false, function(v)
autocl = v
end)
zzjwp:Toggle("自动拾取宝石", "auto", false, function(v)
autobs = v
if autobs then
while autobs and wait() do
local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer
if localPlayer.Character and localPlayer.Character:FindFirstChild("Humanoid") then
local rootPart = localPlayer.Character:FindFirstChild("HumanoidRootPart")
if rootPart then
            for _, l in pairs(game:GetService("Workspace").Game.Entities.ItemPickup:GetChildren()) do
                for _, v in pairs(l:GetChildren()) do
                    if v.ClassName == "MeshPart" or v.ClassName == "Part" then
                        for _, e in pairs(v:GetChildren()) do
                            if e.ClassName == "ProximityPrompt" then
                                if e.ObjectText == "Amethyst" or e.ObjectText == "Sapphire" or e.ObjectText == "Emerald"  or e.ObjectText == "Topaz"  or e.ObjectText == "Ruby"  or e.ObjectText == "Diamond Ring"  or e.ObjectText == "Diamond" or e.ObjectText == "Void Gem" or e.ObjectText == "Dark Matter Gem" or e.ObjectText == "Rollie" then
                                for _, obj in ipairs(workspace.BankRobbery.VaultDoor:GetDescendants()) do
                                if obj:IsA("ProximityPrompt") then
                                if (obj.Parent.Position - rootPart.Position).Magnitude > 35 then
                                obj.RequiresLineOfSight = false
                                obj.HoldDuration = 0
                                fireproximityprompt(obj)
                                end
                                end
                                end
                                local itemCFrame = v.CFrame
                                rootPart.CFrame = itemCFrame * CFrame.new(0, 2, 0)
                                e.RequiresLineOfSight = false
                                e.HoldDuration = 0
                                wait(0.1)
                                fireproximityprompt(e)
                                fireproximityprompt(e)
                                fireproximityprompt(e)
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end
end
end)
zzjwp:Toggle("自动拾取红卡", "auto", false, function(v)
autohk = v
if autohk then
while autohk and wait() do
local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer
if localPlayer.Character and localPlayer.Character:FindFirstChild("Humanoid") then
local rootPart = localPlayer.Character:FindFirstChild("HumanoidRootPart")
if rootPart then
            for _, l in pairs(game:GetService("Workspace").Game.Entities.ItemPickup:GetChildren()) do
                for _, v in pairs(l:GetChildren()) do
                    if v.ClassName == "MeshPart" or v.ClassName == "Part" then
                        for _, e in pairs(v:GetChildren()) do
                            if e.ClassName == "ProximityPrompt" then
                                if e.ObjectText == "Military Armory Keycard" then
                                local itemCFrame = v.CFrame
                                rootPart.CFrame = itemCFrame * CFrame.new(0, 2, 0)
                                e.RequiresLineOfSight = false
                                e.HoldDuration = 0
                                wait(0.1)
                                fireproximityprompt(e)
                                fireproximityprompt(e)
                                fireproximityprompt(e)
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end
end
end)
zzjwp:Toggle("自动拾取印钞机", "auto", false, function(v)
automn = v
if automn then
while automn and wait() do
local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer
if localPlayer.Character and localPlayer.Character:FindFirstChild("Humanoid") then
local rootPart = localPlayer.Character:FindFirstChild("HumanoidRootPart")
if rootPart then
            for _, l in pairs(game:GetService("Workspace").Game.Entities.ItemPickup:GetChildren()) do
                for _, v in pairs(l:GetChildren()) do
                    if v.ClassName == "MeshPart" or v.ClassName == "Part" then
                        for _, e in pairs(v:GetChildren()) do
                            if e.ClassName == "ProximityPrompt" then
                                if e.ObjectText == "Money Printer" then
                                local itemCFrame = v.CFrame
                                rootPart.CFrame = itemCFrame * CFrame.new(0, 2, 0)
                                e.RequiresLineOfSight = false
                                e.HoldDuration = 0
                                wait(0.1)
                                fireproximityprompt(e)
                                fireproximityprompt(e)
                                fireproximityprompt(e)
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end
end
end)
zzjwp:Toggle("自动拾取顶级物品", "auto", false, function(v)
autodj = v
if autodj then
while autodj and wait() do
local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer
if localPlayer.Character and localPlayer.Character:FindFirstChild("Humanoid") then
local rootPart = localPlayer.Character:FindFirstChild("HumanoidRootPart")
if rootPart then
            for _, l in pairs(game:GetService("Workspace").Game.Entities.ItemPickup:GetChildren()) do
                for _, v in pairs(l:GetChildren()) do
                    if v.ClassName == "MeshPart" or v.ClassName == "Part" then
                        for _, e in pairs(v:GetChildren()) do
                            if e.ClassName == "ProximityPrompt" then
                                if e.ObjectText == "Suitcase Nuke" or e.ObjectText == "Nuke Launcher" or e.ObjectText == "Easter Basket" then
                                local itemCFrame = v.CFrame
                                rootPart.CFrame = itemCFrame * CFrame.new(0, 2, 0)
                                e.RequiresLineOfSight = false
                                e.HoldDuration = 0
                                wait(0.1)
                                fireproximityprompt(e)
                                fireproximityprompt(e)
                                fireproximityprompt(e)
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end
end
end)
zzjwp:Toggle("自动拾取金条", "auto", false, function(v)
autojt = v
if autojt then
while autojt and wait() do
local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer
if localPlayer.Character and localPlayer.Character:FindFirstChild("Humanoid") then
local rootPart = localPlayer.Character:FindFirstChild("HumanoidRootPart")
if rootPart then
            for _, l in pairs(game:GetService("Workspace").Game.Entities.ItemPickup:GetChildren()) do
                for _, v in pairs(l:GetChildren()) do
                    if v.ClassName == "MeshPart" or v.ClassName == "Part" then
                        for _, e in pairs(v:GetChildren()) do
                            if e.ClassName == "ProximityPrompt" and e.ObjectText == "Gold Bar" then
                                for _, obj in ipairs(workspace.BankRobbery.VaultDoor:GetDescendants()) do
                                if obj:IsA("ProximityPrompt") then
                                if (obj.Parent.Position - rootPart.Position).Magnitude > 35 then
                                obj.RequiresLineOfSight = false
                                obj.HoldDuration = 0
                                fireproximityprompt(obj)
                                end
                                end
                                end
                                local itemCFrame = v.CFrame
                                rootPart.CFrame = itemCFrame * CFrame.new(0, 2, 0)
                                e.RequiresLineOfSight = false
                                e.HoldDuration = 0
                                wait(0.1)
                                fireproximityprompt(e)
                                fireproximityprompt(e)
                                fireproximityprompt(e)
                            end
                        end
                    end
                end
            end
        end
    end
end
end
end)
zzjwp:Toggle("自动拾取气球", "auto", false, function(v)
autoqq = v
if autoqq then
while autoqq and wait() do
local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer
if localPlayer.Character and localPlayer.Character:FindFirstChild("Humanoid") then
local rootPart = localPlayer.Character:FindFirstChild("HumanoidRootPart")
if rootPart then
            for _, l in pairs(game:GetService("Workspace").Game.Entities.ItemPickup:GetChildren()) do
                for _, v in pairs(l:GetChildren()) do
                    if v.ClassName == "MeshPart" or v.ClassName == "Part" then
                        for _, e in pairs(v:GetChildren()) do
                            if e.ClassName == "ProximityPrompt" then
                                if e.ObjectText == "Bunny Balloon" or e.ObjectText == "Ghost Balloon" or e.ObjectText == "Clover Balloon" or e.ObjectText == "Bat Balloon" or e.ObjectText == "Gold Clover Balloon" or e.ObjectText == "Golden Rose" or e.ObjectText == "Black Rose" or e.ObjectText == "Heart Balloon" then
                                local itemCFrame = v.CFrame
                                rootPart.CFrame = itemCFrame * CFrame.new(0, 2, 0)
                                e.RequiresLineOfSight = false
                                e.HoldDuration = 0
                                wait(0.1)
                                fireproximityprompt(e)
                                fireproximityprompt(e)
                                fireproximityprompt(e)
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end
end
end)
zzjwp:Toggle("自动拾取蓝色糖果棒", "auto", false, function(v)
autoblue = v
if autoblue then
while autoblue and wait() do
local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer
if localPlayer.Character and localPlayer.Character:FindFirstChild("Humanoid") then
local rootPart = localPlayer.Character:FindFirstChild("HumanoidRootPart")
if rootPart then
            for _, l in pairs(game:GetService("Workspace").Game.Entities.ItemPickup:GetChildren()) do
                for _, v in pairs(l:GetChildren()) do
                    if v.ClassName == "MeshPart" or v.ClassName == "Part" then
                        for _, e in pairs(v:GetChildren()) do
                            if e.ClassName == "ProximityPrompt" then
                                if e.ObjectText == "Blue Candy Cane" then
                                local itemCFrame = v.CFrame
                                rootPart.CFrame = itemCFrame * CFrame.new(0, 2, 0)
                                e.RequiresLineOfSight = false
                                e.HoldDuration = 0
                                wait(0.1)
                                fireproximityprompt(e)
                                fireproximityprompt(e)
                                fireproximityprompt(e)
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end
end
end)
zzjwp:Toggle("自动拾取幸运方块", "auto", false, function(v)
autoluck = v
if autoluck then
while autoluck and wait() do
local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer
if localPlayer.Character and localPlayer.Character:FindFirstChild("Humanoid") then
local rootPart = localPlayer.Character:FindFirstChild("HumanoidRootPart")
if rootPart then
            for _, l in pairs(game:GetService("Workspace").Game.Entities.ItemPickup:GetChildren()) do
                for _, v in pairs(l:GetChildren()) do
                    if v.ClassName == "MeshPart" or v.ClassName == "Part" then
                        for _, e in pairs(v:GetChildren()) do
                            if e.ClassName == "ProximityPrompt" then
                                if e.ObjectText == "Green Lucky Block" or e.ObjectText == "Orange Lucky Block" or e.ObjectText == "Purple Lucky Block" then
                                local itemCFrame = v.CFrame
                                rootPart.CFrame = itemCFrame * CFrame.new(0, 2, 0)
                                e.RequiresLineOfSight = false
                                e.HoldDuration = 0
                                wait(0.1)
                                fireproximityprompt(e)
                                fireproximityprompt(e)
                                fireproximityprompt(e)
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end
end
end)
local main = window:Tab("RPG轰炸玩法")
local RPGAUTO = main:section("RPG轰炸玩法", true)
RPGAUTO:Button("RPG环绕轰炸", function()
local ReplicatedStorage=game:GetService("ReplicatedStorage")local Players=game:GetService("Players")local localPlayer=Players.LocalPlayer local function findRemoteEvent(eventName)for _,v in next,getgc(false)do if typeof(v)=="function" then local source=debug.info(v,"s")local name=debug.info(v,"n")if source and source:find("Signal")and name=="FireServer" then local success,upvalue=pcall(getupvalue,v,1)if success and upvalue and typeof(upvalue)=="table" then for k,remote in pairs(upvalue)do if k==eventName then return typeof(remote)=="string" and ReplicatedStorage.devv.remoteStorage[remote]or remote end end end break end end end return nil end local rocketHit=ReplicatedStorage.devv.remoteStorage:FindFirstChild("rocketHit")or findRemoteEvent("rocketHit")local lastArgs=nil local isListening=false local originalNamecall originalNamecall=hookmetamethod(game,"__namecall",function(self,...)local args={...}local method=getnamecallmethod()if self==rocketHit and method=="FireServer" then if not lastArgs then lastArgs=args isListening=true coroutine.wrap(function()while isListening and lastArgs do if localPlayer.Character then local localRoot=localPlayer.Character:FindFirstChild("HumanoidRootPart")if localRoot then local center=localRoot.Position local radius=50 local explosionCount=999 while isListening do for i=1,explosionCount do if not isListening then break end local angle=(i / explosionCount)* math.pi * 2 local x=center.X + math.cos(angle)* radius local y=center.Y local z=center.Z + math.sin(angle)* radius local modifiedArgs={lastArgs[1],lastArgs[2],Vector3.new(x,y,z)}rocketHit:FireServer(unpack(modifiedArgs))end radius=radius + 5 task.wait()end end end task.wait()end end)()end end return originalNamecall(self,...)end)
end)
RPGAUTO:Button("RPG圆形轰炸", function()
local ReplicatedStorage=game:GetService("ReplicatedStorage")local Players=game:GetService("Players")local localPlayer=Players.LocalPlayer local function findRemoteEvent(eventName)for _,v in next,getgc(false)do if typeof(v)=="function" then local source=debug.info(v,"s")local name=debug.info(v,"n")if source and source:find("Signal")and name=="FireServer" then local success,upvalue=pcall(getupvalue,v,1)if success and upvalue and typeof(upvalue)=="table" then for k,remote in pairs(upvalue)do if k==eventName then return typeof(remote)=="string" and ReplicatedStorage.devv.remoteStorage[remote]or remote end end end break end end end return nil end local rocketHit=ReplicatedStorage.devv.remoteStorage:FindFirstChild("rocketHit")or findRemoteEvent("rocketHit")local lastArgs=nil local isListening=false local originalNamecall originalNamecall=hookmetamethod(game,"__namecall",function(self,...)local args={...}local method=getnamecallmethod()if self==rocketHit and method=="FireServer" then if not lastArgs then lastArgs=args isListening=true coroutine.wrap(function()while isListening and lastArgs do if localPlayer.Character then local localRoot=localPlayer.Character:FindFirstChild("HumanoidRootPart")if localRoot then local radius=50 local angle=math.random()* 2 * math.pi local x=localRoot.Position.X + radius * math.cos(angle)local y=localRoot.Position.Y local z=localRoot.Position.Z + radius * math.sin(angle)local modifiedArgs={lastArgs[1],lastArgs[2],Vector3.new(x,y,z)}rocketHit:FireServer(unpack(modifiedArgs))end end task.wait()end end)()end end return originalNamecall(self,...)end)
end)
RPGAUTO:Button("RPG直线轰炸", function()
local ReplicatedStorage=game:GetService("ReplicatedStorage")local Players=game:GetService("Players")local localPlayer=Players.LocalPlayer local function findRemoteEvent(eventName)for _,v in next,getgc(false)do if typeof(v)=="function" then local source=debug.info(v,"s")local name=debug.info(v,"n")if source and source:find("Signal")and name=="FireServer" then local success,upvalue=pcall(getupvalue,v,1)if success and upvalue and typeof(upvalue)=="table" then for k,remote in pairs(upvalue)do if k==eventName then return typeof(remote)=="string" and ReplicatedStorage.devv.remoteStorage[remote]or remote end end end break end end end return nil end local rocketHit=ReplicatedStorage.devv.remoteStorage:FindFirstChild("rocketHit")or findRemoteEvent("rocketHit")local lastArgs=nil local isListening=false local originalNamecall originalNamecall=hookmetamethod(game,"__namecall",function(self,...)local args={...}local method=getnamecallmethod()if self==rocketHit and method=="FireServer" then if not lastArgs then lastArgs=args isListening=true coroutine.wrap(function()while isListening and lastArgs do if localPlayer.Character then local localRoot=localPlayer.Character:FindFirstChild("HumanoidRootPart")local humanoid=localPlayer.Character:FindFirstChildOfClass("Humanoid")if localRoot and humanoid then local lookVector=humanoid.RootPart.CFrame.LookVector lookVector=Vector3.new(lookVector.X,0,lookVector.Z).Unit for distance=10,math.huge,10 do if not isListening then break end local x=localRoot.Position.X +(lookVector.X * distance)local y=localRoot.Position.Y local z=localRoot.Position.Z +(lookVector.Z * distance)local modifiedArgs={lastArgs[1],lastArgs[2],Vector3.new(x,y,z)}rocketHit:FireServer(unpack(modifiedArgs))task.wait()end end end task.wait()end end)()end end return originalNamecall(self,...)end)
end)
Magisk:Dropdown({
    Title = "选择一个皮肤",
    Values = { 
        "烟火", "虚空", "纯金", "暗物质", "反物质", "神秘", "虚空神秘", "战术", "纯金战术", 
        "白未来", "黑未来", "圣诞未来", "礼物包装", "猩红", "收割者", "虚空收割者", "圣诞玩具",
        "荒地", "隐形", "像素", "钻石像素", "黄金零下", "绿水晶", "生物", "樱花", "精英", 
        "黑樱花", "彩虹激光", "蓝水晶", "紫水晶", "红水晶", "零下", "虚空射线", "冰冻钻石",
        "虚空梦魇", "金雪", "爱国者", "MM2", "声望", "酷化", "蒸汽", "海盗", "玫瑰", "黑玫瑰",
        "激光", "烟花", "诅咒背瓜", "大炮", "财富", "黄金大炮", "四叶草", "自由", "黑曜石", "赛博朋克"
    },
    Callback = function(Value) 
        if Value == "烟火" then
            skinsec = "Sparkler"
        elseif Value == "虚空" then
            skinsec = "Void"
        elseif Value == "纯金" then
            skinsec = "Solid Gold"
        elseif Value == "暗物质" then
            skinsec = "Dark Matter"
        elseif Value == "反物质" then
            skinsec = "Anti Matter"
        elseif Value == "神秘" then
            skinsec = "Hystic"
        elseif Value == "虚空神秘" then
            skinsec = "Void Mystic"
        elseif Value == "战术" then
            skinsec = "Tactical"
        elseif Value == "纯金战术" then
            skinsec = "Solid Gold Tactical"
        elseif Value == "白未来" then
            skinsec = "Future White"
        elseif Value == "黑未来" then
            skinsec = "Future Black"
        elseif Value == "圣诞未来" then
            skinsec = "Christmas Future"
        elseif Value == "礼物包装" then
            skinsec = "Gift Wrapped"
        elseif Value == "猩红" then
            skinsec = "Crimson Blood"
        elseif Value == "收割者" then
            skinsec = "Reaper"
        elseif Value == "虚空收割者" then
            skinsec = "Void Reaper"
        elseif Value == "圣诞玩具" then
            skinsec = "Christmas Toy"
        elseif Value == "荒地" then
            skinsec = "Wasteland"
        elseif Value == "隐形" then
            skinsec = "Invisible"
        elseif Value == "像素" then
            skinsec = "Pixel"
        elseif Value == "钻石像素" then
            skinsec = "Diamond Pixel"
        elseif Value == "黄金零下" then
            skinsec = "Frozen-Gold"
        elseif Value == "绿水晶" then
            skinsec = "Atomic Nature"
        elseif Value == "生物" then
            skinsec = "Biohazard"
        elseif Value == "樱花" then
            skinsec = "Sakura"
        elseif Value == "精英" then
            skinsec = "Elite"
        elseif Value == "黑樱花" then
            skinsec = "Death Blossom-Gold"
        elseif Value == "彩虹激光" then
            skinsec = "Rainbowlaser"
        elseif Value == "蓝水晶" then
            skinsec = "Atomic Water"
        elseif Value == "紫水晶" then
            skinsec = "Atomic Amethyst"
        elseif Value == "红水晶" then
            skinsec = "Atomic Flame"
        elseif Value == "零下" then
            skinsec = "Sub-Zero"
        elseif Value == "虚空射线" then
            skinsec = "Void-Ray"
        elseif Value == "冰冻钻石" then
            skinsec = "Frozen Diamond"
        elseif Value == "虚空梦魇" then
            skinsec = "Void Nightmare"
        elseif Value == "金雪" then
            skinsec = "Golden Snow"
        elseif Value == "爱国者" then
            skinsec = "Patriot"
        elseif Value == "MM2" then
            skinsec = "MM2 Barrett"
        elseif Value == "声望" then
            skinsec = "Prestige Barnett"
        elseif Value == "酷化" then
            skinsec = "Skin Walter"
        elseif Value == "蒸汽" then
            skinsec = "Steampunk"
        elseif Value == "海盗" then
            skinsec = "Pirate"
        elseif Value == "玫瑰" then
            skinsec = "Rose"
        elseif Value == "黑玫瑰" then
            skinsec = "Black Rose"
        elseif Value == "激光" then
            skinsec = "Hyperlaser"
        elseif Value == "烟花" then
            skinsec = "Firework"
        elseif Value == "诅咒背瓜" then
            skinsec = "Cursed Pumpkin"
        elseif Value == "大炮" then
            skinsec = "Cannon"
        elseif Value == "财富" then
            skinsec = "Firework"
        elseif Value == "黄金大炮" then
            skinsec = "Gold Cannon"
        elseif Value == "四叶草" then
            skinsec = "Lucky Clover"
        elseif Value == "自由" then
            skinsec = "Freedom"
        elseif Value == "黑曜石" then
            skinsec = "Obsidian"
        elseif Value == "赛博朋克" then
            skinsec = "Cyberpunk"
        end
    end
})
Magisk:Toggle({
    Title = "开启美化",
    --Image = "bird",
    Value = false,
    Callback = function(start) 
autoskin = start
if autoskin then
local it = require(game:GetService("ReplicatedStorage").devv).load("v3item").inventory
local b1 = require(game:GetService('ReplicatedStorage').devv).load('v3item').inventory.items
for i, item in next, b1 do 
if item.type == "Gun" then
it.skinUpdate(item.name, skinsec)
end
end
end
end
})
local Players = game:GetService("Players")
local plr = Players.LocalPlayer
local function StopAnim()
	plr.Character.Animate.Disabled = false
    local animtrack = plr.Character.Humanoid:GetPlayingAnimationTracks()
    for i, track in pairs (animtrack) do
        track:Stop()
    end
end

    else
        game.Players.LocalPlayer:Kick("卡密错误！！！")
    end
end)
